<?xml version="1.0" encoding="UTF-8"?>
<Entities
 build="b2219"
 majorVersion="8"
 minorVersion="4"
 modelPersistenceProviderPackage="PostgresPersistenceProviderPackage"
 revision="3"
 schemaVersion="1041"
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         lastModifiedDate="2019-10-16T14:46:52.272Z"
         name="SheetalTest"
         projectName="AdiDevOps"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions></ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="RunAllTests">
                        <ConfigurationTables>
                            <ConfigurationTable
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        //var params = {
                                        //    infoTableName : "InfoTable",
                                        //    dataShapeName : "TestResultData"
                                        //};
                                        //
                                        //// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(TestResultData)
                                        //var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        //
                                        //// TestResultData entry object
                                        //var FirstEntry = new Object();
                                        //FirstEntry.comments = "test result that passed the verification"; // STRING
                                        //FirstEntry.inputParams = {"name": "Mike"}; // JSON
                                        //FirstEntry.expectedOutput = {"name": "Mike"}; //JSON
                                        //FirstEntry.passed = true; // BOOLEAN
                                        //FirstEntry.testName = "Test for UserName Passed"; // STRING [Primary Key]
                                        //FirstEntry.timestamp = new Date(); // DATETIME [Primary Key]
                                        //
                                        //var SecondEntry = new Object();
                                        //SecondEntry.comments = "test result that failed the verification"; // STRING
                                        //SecondEntry.inputParams = {"name": "John"}; // JSON
                                        //SecondEntry.expectedOutput = {"name": "Mike"}; // JSON
                                        //SecondEntry.passed = false; // BOOLEAN
                                        //SecondEntry.testName = "Test for UserName Failed"; // STRING [Primary Key]
                                        //SecondEntry.timestamp = new Date(); // DATETIME [Primary Key]
                                        //
                                        //result.AddRow(FirstEntry);
                                        //result.AddRow(SecondEntry);
                                        //
                                        
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "TestResultData"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(TestResultData)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        // TestResultData entry object
                                        var newEntry = new Object();
                                        newEntry.comments = "Comments1"; // STRING
                                        newEntry.inputParams = {"name": "Mike"}; // JSON
                                        newEntry.expectedOutput = {"name": "Mike"}; // JSON
                                        newEntry.passed = true; // BOOLEAN
                                        newEntry.testName = "Test Name Passed"; // STRING [Primary Key]
                                        newEntry.timestamp = new Date(); // DATETIME [Primary Key]
                                        
                                        result.AddRow(newEntry);
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes>
                <ImplementedShape
                 name="TestingTS"
                 type="ThingShape"></ImplementedShape>
            </ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
